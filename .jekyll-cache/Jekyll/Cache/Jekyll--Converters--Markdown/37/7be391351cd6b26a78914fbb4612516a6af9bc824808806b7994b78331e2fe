I"FD<ul id="markdown-toc">
  <li><a href="#编译器" id="markdown-toc-编译器">编译器</a>    <ul>
      <li><a href="#intel系-ccicc-fcifort-cxxicpc" id="markdown-toc-intel系-ccicc-fcifort-cxxicpc">intel系 CC=icc FC=ifort CXX=icpc</a></li>
      <li><a href="#gcc系-ccgcc-fcgfortran-cxxg" id="markdown-toc-gcc系-ccgcc-fcgfortran-cxxg">GCC系 CC=gcc FC=gfortran CXX=g++</a></li>
    </ul>
  </li>
  <li><a href="#并行编程接口" id="markdown-toc-并行编程接口">并行编程接口</a>    <ul>
      <li><a href="#mpi-超算常用" id="markdown-toc-mpi-超算常用">MPI 超算常用</a>        <ul>
          <li><a href="#openmpi" id="markdown-toc-openmpi">OPENMPI</a></li>
          <li><a href="#impiintel-mpi" id="markdown-toc-impiintel-mpi">IMPI(Intel MPI)</a></li>
          <li><a href="#mpich等我没用过略" id="markdown-toc-mpich等我没用过略">MPICH等，我没用过，略</a></li>
        </ul>
      </li>
      <li><a href="#pthreads-略" id="markdown-toc-pthreads-略">Pthreads 略</a></li>
      <li><a href="#openmp" id="markdown-toc-openmp">OPENMP</a></li>
    </ul>
  </li>
  <li><a href="#库" id="markdown-toc-库">库</a>    <ul>
      <li><a href="#mkl" id="markdown-toc-mkl">MKL</a></li>
      <li><a href="#netlib安装" id="markdown-toc-netlib安装">NETLIB安装</a></li>
      <li><a href="#fftw" id="markdown-toc-fftw">FFTW</a></li>
      <li><a href="#gsl-libxc等" id="markdown-toc-gsl-libxc等">GSL libXC等</a></li>
    </ul>
  </li>
  <li><a href="#example0-intelimpimklvasp541" id="markdown-toc-example0-intelimpimklvasp541">Example0-Intel+IMPI+mkl+vasp.5.4.1</a></li>
  <li><a href="#example1-gcc-484openmpi-1103mkl-intel18vasp541" id="markdown-toc-example1-gcc-484openmpi-1103mkl-intel18vasp541">Example1-GCC-4.8.4+openmpi-1.10.3+mkl-intel18+vasp.5.4.1</a>    <ul>
      <li><a href="#源码修改" id="markdown-toc-源码修改">源码修改</a></li>
      <li><a href="#库-1" id="markdown-toc-库-1">库</a></li>
    </ul>
  </li>
  <li><a href="#example2-gcc-484openmpi-1103netlib数学库vasp541" id="markdown-toc-example2-gcc-484openmpi-1103netlib数学库vasp541">Example2-GCC-4.8.4+openmpi-1.10.3+netlib数学库+vasp.5.4.1</a>    <ul>
      <li><a href="#源码修改-1" id="markdown-toc-源码修改-1">源码修改</a></li>
      <li><a href="#库-2" id="markdown-toc-库-2">库</a></li>
    </ul>
  </li>
  <li><a href="#example3-gcc-484openmpi-1103mkloctopus" id="markdown-toc-example3-gcc-484openmpi-1103mkloctopus">Example3-GCC-4.8.4+openmpi-1.10.3+mkl+octopus</a></li>
  <li><a href="#example4-gcc-484openmpi-1103netlib数学库octopus" id="markdown-toc-example4-gcc-484openmpi-1103netlib数学库octopus">Example4-GCC-4.8.4+openmpi-1.10.3+netlib数学库+octopus</a></li>
  <li><a href="#还需要" id="markdown-toc-还需要">还需要</a></li>
</ul>

<p>回顾以前的编译坑</p>

<h2 id="编译器">编译器</h2>
<h3 id="intel系-ccicc-fcifort-cxxicpc">intel系 CC=icc FC=ifort CXX=icpc</h3>
<p>使用</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>source /opt/intel/compilers_and_libraries_2018.0.128/linux/bin/compilervars.sh intel64
source /opt/intel/compilers_and_libraries_2018.0.128/linux/bin/iccvars.sh intel64 
source /opt/intel/compilers_and_libraries_2018.0.128/linux/bin/ifortvars.sh intel64
</code></pre></div></div>
<h3 id="gcc系-ccgcc-fcgfortran-cxxg">GCC系 CC=gcc FC=gfortran CXX=g++</h3>
<p>使用</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>export PATH=$GCCDIR/bin:$PATH
export LD_LIBRARY_PATH=$GCCDIR/lib64:$LD_LIBRARY_PATH
</code></pre></div></div>

<h2 id="并行编程接口">并行编程接口</h2>
<h3 id="mpi-超算常用">MPI 超算常用</h3>
<p><a href="https://zh.wikipedia.org/wiki/%E8%A8%8A%E6%81%AF%E5%82%B3%E9%81%9E%E4%BB%8B%E9%9D%A2">wiki-MPI</a>消息传递界面/接口（英语：Message Passing Interface，缩写MPI）是一个并行计算的应用程序接口（API），常在超级计算机、计算机簇等非共享内存环境程序设计
<br />运行方式</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mpirun -np 核数 $EXEC
</code></pre></div></div>
<p>每种MPI程序(如OPENMPI，MPICH2)使用的串行(ifort或gcc)编译器编译，形成不同的并行编译器(openmpi+ifort或openmpi+gcc)</p>
<h4 id="openmpi">OPENMPI</h4>
<p><a href="https://www.open-mpi.org/">Open MPI:Open Source High Performance Computing</a>
<br />使用编译器编译OPENMPI参考<a href="https://cndaqiang.github.io/2018/09/12/gun-openmpi-siesta/#%E7%BC%96%E8%AF%91openmpi">gcc Openmpi 编译siesta</a>,只需把<code class="highlighter-rouge">FC CC CXX</code>指定即可
<br />如使用intel系<code class="highlighter-rouge">FC=ifort CC=icc CXX=icpc</code>,测试使用intel18的编译器编译openmpi-2.1.5与openmpi-4.0.0通过，其他版本可能存在兼容性问题
<br />个人编译，环境变量</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>export PATH=$MPIDIR/bin:$PATH
export LD_LIBRARY_PATH=$MPIDIR/lib:$LD_LIBRARY_PATH
</code></pre></div></div>
<p>超算上一般都编译好了不同的MPI程序和编译器的组合，如在天河上导入不同编译器与OPENMPI的组合示例</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[AAA@lon6%tianhe2-B ~]$  module load openmpi/1.10-intel
[AAA@lon6%tianhe2-B ~]$ mpicc --version
icc (ICC) 14.0.2 20140120
Copyright (C) 1985-2014 Intel Corporation.  All rights reserved.


[AAA@lon12%tianhe2-B ~]$ module load openmpi/1.8.3
[AAA@lon12%tianhe2-B ~]$ mpicc --version
gcc (GCC) 4.4.7 20120313 (Red Hat 4.4.7-4)
Copyright (C) 2010 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
</code></pre></div></div>

<h4 id="impiintel-mpi">IMPI(Intel MPI)</h4>
<p>Intel MPI－Intel基于开放源代码的MPICH2与MVAPICH2研发成的MPI
<br />安装parallel_studio_xe_2018可以安装，一般目录在<code class="highlighter-rouge">/opt/intel/impi/</code>,包含IMPI+intel系与IMPI+gcc系
<br />环境变量</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>source /opt/intel/impi/5.0.2.044/bin64/mpivars.sh
source  /opt/intel/impi/2018.0.128/bin64/mpivars.sh

#intel系 mpiicc mpiifort mpiicpc
#gcc系 mpicc mpif90 mpicxx
</code></pre></div></div>
<p>天河调用IMPI,包含IMPI+intel系与IMPI+gcc系,命令同上</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[AAA@lon6%tianhe2-B ~]$ module load MPI/Intel/IMPI/4.1.3.048
[AAA@lon6%tianhe2-B ~]$ mpiifort --version
ifort (IFORT) 14.0.2 20140120
Copyright (C) 1985-2014 Intel Corporation.  All rights reserved.
</code></pre></div></div>

<h4 id="mpich等我没用过略">MPICH等，我没用过，略</h4>

<h3 id="pthreads-略">Pthreads 略</h3>
<h3 id="openmp">OPENMP</h3>
<p><strong>注意OPENMP不是OPENMPI，OPENMPI是基于MPI的一种</strong><br />
依据<a href="https://zh.wikipedia.org/zh-hans/OpenMP">wiki-OpenMP</a>的说法，OpenMP的另一个缺点是不能在非共享内存系统（如计算机集群）上使用。在这样的系统上，MPI使用较多。
<br />然后天河上好像也没有OPENMP的module，先略了</p>

<h2 id="库">库</h2>
<p>库与编译该库的编译器一定要对应<br />
有些程序使用两种库都可以安装，但测试的时候一种经常报错，如octopus-7.1与mkl，在<code class="highlighter-rouge">make check</code>时各种FAIL，而octopus与从netlib下载编译的库就没有</p>
<h3 id="mkl">MKL</h3>
<p><a href="https://software.intel.com/en-us/articles/intel-mkl-link-line-advisor/">⭐自助调用⭐</a><br />
安装parallel_studio_xe_2018可以安装，一般目录在<code class="highlighter-rouge">/opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64</code>
环境变量设置</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>source  /opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/bin/mklvars.sh intel64
</code></pre></div></div>
<p>天河上也有相应模块<code class="highlighter-rouge">intel-compilers/mkl-15</code>等<br />
MKL主要包含如下内容：</p>
<ul>
  <li>基本线性代数子系统库(BLAS)</li>
  <li>离散基本线性代数库(Sparse BLAS)</li>
  <li>线性代数库(LAPACK)</li>
  <li>可扩展性线性代数库(ScaLAPACK)</li>
  <li>离散求解程序(Sparse Solver routines)</li>
  <li>向量数学库函数(Vector Mathematical Library functions)</li>
  <li>向量统计库函数(Vector Statistical Library functions)</li>
  <li>傅立叶变换程序(Fourier Transform functions (FFT))</li>
  <li>集群版傅立叶变换程序(Cluster FFT)</li>
  <li>区间求解程序(Interval Solver routines)</li>
  <li>三角变换程序(Trigonometric Transform routines)</li>
  <li>泊松、拉普拉斯和哈密顿求解程序(Poisson, Laplace, and Helmholtz Solver routines)</li>
  <li>优化（信赖域）求解程序(Optimization (Trust-Region) Solver routines)</li>
</ul>

<p>注意调用的时候</p>
<ul>
  <li>有的库适合intel系编译器，有的适合gcc系，如<code class="highlighter-rouge">libmkl_gf_lp64.a</code>与<code class="highlighter-rouge">libmkl_intel_lp64.a</code></li>
  <li>有的库适合IMPI有的适合OPENMPI，如<code class="highlighter-rouge">libmkl_blacs_openmpi_ilp64.a</code>与<code class="highlighter-rouge">libmkl_blacs_intelmpi_ilp64.a</code></li>
  <li>ilp与lp的区别：ilp支持的数据更大，编vasp的时候lp就可以了，ilp未尝试，<a href="https://software.intel.com/en-us/mkl-macos-developer-guide-using-the-ilp64-interface-vs-lp64-interface">详细区别</a></li>
  <li>最懒的调用方式<a href="https://software.intel.com/en-us/articles/intel-mkl-link-line-advisor/">⭐自助调用⭐</a></li>
</ul>

<h3 id="netlib安装">NETLIB安装</h3>
<p>包含blas,blacs,lapack,scalapack等<br />
安装示例<a href="https://cndaqiang.github.io/2018/09/12/gun-openmpi-siesta/#%E7%BC%96%E8%AF%91openmpi">gcc Openmpi 编译siesta</a><br />
环境变量</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>MATHDIR=/home/cndaqiang/soft/scalapack/lib
export LD_LIBRARY_PATH=$MATHDIR:$LD_LIBRARY_PATH
</code></pre></div></div>
<p>调用方式</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>MATHLIB = -L$MATHDIR  -lrefblas -ltmg -lreflapack  -lscalapack
</code></pre></div></div>

<h3 id="fftw">FFTW</h3>
<p>编译参考<a href="https://cndaqiang.github.io/2018/09/15/gun-openmpi-octopus-4.1.2/"> centos6.5 gcc Openmpi 编译octopus-4.1.2 </a><br />
建议使用intel系编译器调用使用intel编译器编译的fftw,gcc系同理<br />
调用</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>LIBS_FFTW = -L/home/cndaqiang/soft/OPENMPI-GCC/LIB/fftw-3.3.4/lib -lfftw3_mpi -lfftw3
</code></pre></div></div>
<p><strong>注意</strong>,<code class="highlighter-rouge">libfftw3_mpi.a</code>仅包含并行部分的fftw代码，还要引用<code class="highlighter-rouge">libfftw3.a</code>，此处致谢<a href="https://github.com/IonizingRadiation">Ionizing Radiation</a>
<br />在使用gcc系+netlib系数学库+fftw编译vasp.5.4.1时，要这样设置
<br />在使用intel系或者gcc系+mkl数学库+fftw编译vasp.5.4.1时，貌似因为mkl里面包含了部分fftw的代码，仅调用<code class="highlighter-rouge">-lfftw3_mpi</code>即可</p>

<h3 id="gsl-libxc等">GSL libXC等</h3>
<p>参考<a href="https://cndaqiang.github.io/2018/09/15/gun-openmpi-octopus-4.1.2/"> centos6.5 gcc Openmpi 编译octopus-4.1.2 </a></p>

<h2 id="example0-intelimpimklvasp541">Example0-Intel+IMPI+mkl+vasp.5.4.1</h2>
<p>如<a href="https://cndaqiang.github.io/2018/01/15/intel-mpi-vasp/">Intel Parallel Studio XE 编译VASP </a></p>

<h2 id="example1-gcc-484openmpi-1103mkl-intel18vasp541">Example1-GCC-4.8.4+openmpi-1.10.3+mkl-intel18+vasp.5.4.1</h2>
<h3 id="源码修改">源码修改</h3>
<p>使用gcc系编译vasp.5.4.1,要修改部分vasp源码，方法参考<a href="https://www.nsc.liu.se/~pla/blog/2013/05/14/vasp-gcc/">Compiling VASP With Gfortran</a>，再次致谢<a href="https://github.com/IonizingRadiation">Ionizing Radiation</a><br />
修改<code class="highlighter-rouge">us.F</code>，按照下面，把-开的那行头变成+后面的内容</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>@@ -1460,7 +1460,7 @@ END MODULE
	   USE asa
	   USE paw
	   USE constant
-      USE us
+      USE us, only : setdij_
	   IMPLICIT NONE
 
	   TYPE (type_info)   T_INFO
@@ -2693,7 +2693,7 @@ END MODULE
	   USE mgrid
	   USE lattice
	   USE wave
-      USE us
+      USE us, only: augmentation_charge
</code></pre></div></div>
<h3 id="库-1">库</h3>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cp arch/makefile.include.linux_gfortran makefile.include
</code></pre></div></div>
<p>修改<code class="highlighter-rouge">makefiel.include</code></p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>MKLROOT    = /opt/intel/compilers_and_libraries/linux/mkl
FC         = mpif90  -m64 -I${MKLROOT}/include
FCL        = mpif90  -m64 -I${MKLROOT}/include

BLAS       =  ${MKLROOT}/lib/intel64/libmkl_scalapack_lp64.a -Wl,--start-group ${MKLROOT}/lib/intel64/libmkl_cdft_core.a ${MKLROOT}/lib/intel64/libmkl_gf_lp64.a ${MKLROOT}/lib/intel64/libmkl_sequential.a ${MKLROOT}/lib/intel64/libmkl_core.a ${MKLROOT}/lib/intel64/libmkl_blacs_openmpi_lp64.a -Wl,--end-group -lpthread -lm -ldl

OBJECTS    = fftmpiw.o fftmpi_map.o  fftw3d.o  fft3dlib.o \
             /home/cndaqiang/soft/OPENMPI-GCC/LIB/fftw-3.3.4/lib/libfftw3_mpi.a
INCS       =-I/home/cndaqiang/soft/OPENMPI-GCC/LIB/fftw-3.3.4/include
</code></pre></div></div>

<h2 id="example2-gcc-484openmpi-1103netlib数学库vasp541">Example2-GCC-4.8.4+openmpi-1.10.3+netlib数学库+vasp.5.4.1</h2>
<h3 id="源码修改-1">源码修改</h3>
<p>同上</p>
<h3 id="库-2">库</h3>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cp arch/makefile.include.linux_gfortran makefile.include
</code></pre></div></div>
<p>修改<code class="highlighter-rouge">makefiel.include</code>,<strong>注意fftw的阴影和上面的不一样</strong></p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>FC         = mpif90
FCL        = mpif90

LIBDIR     = /home/cndaqiang/soft/scalapack/lib
BLAS       = -L$(LIBDIR) -lrefblas
LAPACK     = -L$(LIBDIR) -ltmg -lreflapack -llapack
BLACS      =
SCALAPACK  = -L$(LIBDIR) -lscalapack $(BLACS)

OBJECTS    = fftmpiw.o fftmpi_map.o  fftw3d.o  fft3dlib.o \
             /home/chendq/soft/OPENMPI-GCC/LIB/fftw-3.3.4/lib/libfftw3_mpi.a \
             /home/chendq/soft/OPENMPI-GCC/LIB/fftw-3.3.4/lib/libfftw3.a
INCS       =-I/home/chendq/soft/OPENMPI-GCC/LIB/fftw-3.3.4/include
</code></pre></div></div>

<h2 id="example3-gcc-484openmpi-1103mkloctopus">Example3-GCC-4.8.4+openmpi-1.10.3+mkl+octopus</h2>
<p>环境变量</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>GCCDIR=/home/cndaqiang/soft/gcc-4.8.4

MPIDIR=/home/cndaqiang/soft/openmpi-1.10.3_gcc-4.8.4

FFTWDIR=/home/cndaqiang/soft/OPENMPI-GCC/LIB/fftw-3.3.4

GSDIR=/home/cndaqiang/soft/gsl-1.14

LIBXCDIR=/home/cndaqiang/soft/libxc-2.0.3

MKLROOT=/opt/intel/compilers_and_libraries_2018.3.222/linux/mkl
source $MKLROOT/bin/mklvars.sh intel64

export PATH=$GCCDIR/bin:$PATH
export LD_LIBRARY_PATH=$GCCDIR/lib64:$LD_LIBRARY_PATH

export PATH=$MPIDIR/bin:$PATH
export LD_LIBRARY_PATH=$MPIDIR/lib:$LD_LIBRARY_PATH

export PATH=$FFTWDIR/bin:$PATH
export LD_LIBRARY_PATH=$FFTWDIR/lib:$LD_LIBRARY_PATH

export PATH=$GSDIR/bin:$PATH
export LD_LIBRARY_PATH=$GSDIR/lib:$LD_LIBRARY_PATH

export PATH=$LIBXCDIR/bin:$PATH
export LD_LIBRARY_PATH=$LIBXCDIR/lib:$LD_LIBRARY_PATH
</code></pre></div></div>
<p>配置Makefile</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./configure --prefix=/home/cndaqiang/soft/octopus-7.1-build \
 ./configure --prefix=$(pwd)/../../octopus-7.2  --with-blas="-lmkl_gf_lp64 -lmkl_sequential -lmkl_core -lmkl_blas95_lp64" --with-libxc-prefix=$LIBXCDIR   --with-gsl-prefix=$GSDIR  --with-fftw-prefix=$FFTWDIR --enable-mpi CC=mpicc FC=mpif90 CXX=mpicxx FCFLAGS="-O3 -ffree-line-length-none" CFLAGS=-O3    
</code></pre></div></div>
<h2 id="example4-gcc-484openmpi-1103netlib数学库octopus">Example4-GCC-4.8.4+openmpi-1.10.3+netlib数学库+octopus</h2>
<p>环境变量同上
<br />配置Makefile</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code> ./configure --prefix=$(pwd)/../octopus-7,1-build-scalapack  --with-blas="-L$MATHDIR  -lrefblas -ltmg -lreflapack  -lscalapack" --with-libxc-prefix=$LIBXCDIR   --with-gsl-prefix=$GSDIR  --with-fftw-prefix=$FFTWDIR --enable-mpi CC=mpicc FC=mpif90 CXX=mpicxx FCFLAGS="-O3 -ffree-line-length-none" CFLAGS=-O3    
</code></pre></div></div>

<h2 id="还需要">还需要</h2>
<p>还需要好好去学fortran<br />
比如fortran默认单行长度最多132个字符，但是有的程序单行代码很多,如octopus8，对于gcc可以对gfortran(mpif90)添加<code class="highlighter-rouge">-ffree-line-length-none</code>编译参数解决</p>

:ET