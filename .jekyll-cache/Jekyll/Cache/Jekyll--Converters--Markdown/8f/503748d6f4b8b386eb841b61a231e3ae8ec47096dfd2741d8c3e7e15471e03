I"k<ul id="markdown-toc">
  <li><a href="#vim设置" id="markdown-toc-vim设置">vim设置</a>    <ul>
      <li><a href="#关闭缩进" id="markdown-toc-关闭缩进">关闭缩进</a></li>
      <li><a href="#针对文件au" id="markdown-toc-针对文件au">针对文件<code class="highlighter-rouge">au</code></a></li>
      <li><a href="#支持utf-8编码" id="markdown-toc-支持utf-8编码">支持UTF-8编码</a></li>
    </ul>
  </li>
  <li><a href="#插件" id="markdown-toc-插件">插件</a>    <ul>
      <li><a href="#youcompleteme补全插件" id="markdown-toc-youcompleteme补全插件">YouCompleteMe补全插件</a></li>
    </ul>
  </li>
</ul>
<p>此文记录我对vim的配置和使用的一些插件
<br />基于vim插件管理程序<a href="/2018/02/11/vim-plugin/">vim插件管理Vundle</a></p>

<h1 id="vim设置">vim设置</h1>
<ul>
  <li>可以在使用vim时通过命令模式执行命令,仅此次生效</li>
  <li>也可以将命令保存到<code class="highlighter-rouge">~/.vimrc</code>每次打开vim自动生效</li>
</ul>

<h3 id="关闭缩进">关闭缩进</h3>
<p>参考<a href="http://www.cnblogs.com/end/archive/2012/06/01/2531142.html">解决vi/vim中粘贴会在行首多很多缩进和空格的问题</a>
<br />缩进在写代码时很有用，但有时候复制网上代码时，缩进会造成过多的空格和字符不美观
<br />建议仅在复制前执行关闭缩进命令
关闭缩进</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>:set paste
</code></pre></div></div>
<p>恢复缩进</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>:set nopaste
</code></pre></div></div>
<h3 id="针对文件au">针对文件<code class="highlighter-rouge">au</code></h3>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>au BufNewFile,BufRead *.py
\ set tabstop=4     "tab键换成4个空格
\"\后跟命令，进针对au制定的文件
</code></pre></div></div>
<h3 id="支持utf-8编码">支持UTF-8编码</h3>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>set encoding=utf-8
</code></pre></div></div>
<p><br /><br /><br /><br /></p>
<h1 id="插件">插件</h1>
<h2 id="youcompleteme补全插件">YouCompleteMe补全插件</h2>
<p>参考<a href="https://www.jianshu.com/p/f15018e5fafe">安装YouCompleteMe插件-非C系列</a><br />
项目地址<a href="https://github.com/Valloric/YouCompleteMe">Valloric/YouCompleteMe</a><br />
里面的README.md已经说的很详细了，简单记录ubuntu16.04针对python代码补全的安装过程
<br />其他更多内容参考<a href="https://github.com/Valloric/YouCompleteMe">Valloric/YouCompleteMe</a></p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo apt update
sudo apt install build-essential cmake
sudo apt install python-dev python3-dev
# 下载源码 
git clone https://github.com/Valloric/YouCompleteMe.git ~/.vim/bundle/YouCompleteMe
cd ~/.vim/bundle/YouCompleteMe
git submodule update --init --recursive
./install.py
</code></pre></div></div>
<p>编译完成后，修改<code class="highlighter-rouge">~/.vimrc</code>添加插件</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Plugin 'Valloric/YouCompleteMe'
</code></pre></div></div>
<p>安装插件<code class="highlighter-rouge">:PluginInstall</code>
然后测试<code class="highlighter-rouge">vi test.py</code>
<br />输入以下内容，会出现自动补全的代码</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import os
os.
</code></pre></div></div>
<p>更多配置，添加下列内容到<code class="highlighter-rouge">~/.vimrc</code></p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>"默认配置文件路径"
let g:ycm_global_ycm_extra_conf = '~/.vim/bundle/YouCompleteMe/cpp/ycm/.ycm_extra_conf.py'
"打开vim时不再询问是否加载ycm_extra_conf.py配置"
let g:ycm_confirm_extra_conf=0
set completeopt=longest,menu
"python解释器路径"
let g:ycm_path_to_python_interpreter='/usr/bin/python'
"是否开启语义补全"
let g:ycm_seed_identifiers_with_syntax=1
"是否在注释中也开启补全"
let g:ycm_complete_in_comments=1
let g:ycm_collect_identifiers_from_comments_and_strings = 0
"开始补全的字符数"
let g:ycm_min_num_of_chars_for_completion=2
"补全后自动关机预览窗口"
let g:ycm_autoclose_preview_window_after_completion=1
" 禁止缓存匹配项,每次都重新生成匹配项"
let g:ycm_cache_omnifunc=0
"字符串中也开启补全"
let g:ycm_complete_in_strings = 1
"离开插入模式后自动关闭预览窗口"
autocmd InsertLeave * if pumvisible() == 0|pclose|endif
"上下左右键行为"
inoremap &lt;expr&gt; &lt;Down&gt;     pumvisible() ? '\&lt;C-n&gt;' : '\&lt;Down&gt;'
inoremap &lt;expr&gt; &lt;Up&gt;       pumvisible() ? '\&lt;C-p&gt;' : '\&lt;Up&gt;'
inoremap &lt;expr&gt; &lt;PageDown&gt; pumvisible() ? '\&lt;PageDown&gt;\&lt;C-p&gt;\&lt;C-n&gt;' : '\&lt;PageDown&gt;'
inoremap &lt;expr&gt; &lt;PageUp&gt;   pumvisible() ? '\&lt;PageUp&gt;\&lt;C-p&gt;\&lt;C-n&gt;' : '\&lt;PageUp&gt;'
</code></pre></div></div>

:ET